@model LoginModel
@using PlanX.Web.Models.Customer;
@using PlanX.Core;
@using PlanX.Core.Infrastructure;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!String.IsNullOrEmpty(this.Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(this.Context.Request.QueryString["returnUrl"]), null);
    }
}
<div class="wrapper-content inline">
    @Html.Partial("_ExternalAuthentication.AssociateMessage")
    @Html.Partial("_ExternalAuthentication.Errors")
    <div class="page-body">
        <div class="customer-blocks">
            <div class="returning-wrapper">
                <div class="form-fields">
                    @using (Html.BeginForm())
                    {
                        <div class="message-error">
                            @Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text)
                        </div>
                        if (Model.UsernamesEnabled)
                        {
                            <div class="inputs">
                                @Html.LabelFor(m => m.Username, new { }, ":")
                                @Html.TextBoxFor(m => m.Username, new { @class = "username", autofocus = "autofocus" })
                                @Html.ValidationMessageFor(m => m.Username)
                            </div>
                        }
                        else
                        {
                            <div class="inputs">
                                @Html.LabelFor(m => m.Email, new { }, ":")
                                @Html.TextBoxFor(m => m.Email, new { @class = "email", autofocus = "autofocus" })
                                @Html.ValidationMessageFor(m => m.Email)
                            </div>
                        }
                        <div class="inputs">
                            @Html.LabelFor(m => m.Password, new { }, ":")
                            @Html.PasswordFor(m => m.Password, new { @class = "password" })
                            @Html.ValidationMessageFor(m => m.Password)
                        </div>
                        <div class="inputs reversed">
                            @Html.CheckBoxFor(m => m.RememberMe)
                            @Html.LabelFor(m => m.RememberMe)
                            <span class="forgot-password">
                                @Html.RouteLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery")
                            </span>
                        </div>
                        if (Model.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                @Html.Raw(Html.GenerateCaptcha())
                            </div>
                        }
                        <div class="buttons">
                            <input class="default" type="submit" value="@T("Account.Login.LoginButton")" />
                        </div>
                    }
                </div>
            </div>
        </div>
        @*<div class="external-authentication">
                @Html.Action("ExternalMethods", "ExternalAuthentication")
            </div>*@
        @*@Html.Action("TopicBlock", "Topic", new { systemName = "LoginRegistrationInfo" })*@
    </div>
</div>
